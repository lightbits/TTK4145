[4] SAFETY/DEADLOCK
━━━━━━━━━━━━━━━━━━━
Create a system with a deadlock. Does LTSA detect it?

SOLUTION
────────
                    ╭─────────────────────╮
                    │A     = (x → y → A). │
                    │B     = (y → x → B). │
                    │||SYS = (A || B).    │
                    ╰─────────────────────╯

Has a deadlock, since x cannot occur without y having occurred,
and y cannot occur without x having occurred.

This is visible from the FSP model, since x and y are shared actions.
A shared action must occur simultaneously in all processes that listen
to it.


[5] PROGRESS/LIVELOCK
━━━━━━━━━━━━━━━━━━━━━
Create a system with a livelock, in other words, a system
where there is a subset of states that there is no way to
get out from. How is this detected by LTSA?

SOLUTION
────────
                  ╭─────────────────────────╮
                  │ A     = (x → A | y → B).│
                  │ B     = (z → B).        │
                  │ ||SYS = (A || B).       │
                  ╰─────────────────────────╯

The corresponding diagram shows that after transitioning to
B, there is no way to get back to A, and execute the action
x.
                          x         z
                        ╭───╮     ╭───╮
                        │   │  y  │   │
                        ╰──→A────→B←──╯

Q: Assume that the subset is not a livelock, but normal
behaviour. Create a progress property that contains only
those states that are part of the livelock to get rid of
the error.

SOLUTION
────────
A liveness (progress) property asserts that something good
eventually happens.

    progress ZHappens = {z}


[6] DINING PHILOSOPHERS
━━━━━━━━━━━━━━━━━━━━━━━
Model a system with 3 philosophers and 3 forks and demonstrate
a deadlock.

                              P₀
                            F₂  F₀
                          P₂  F₁  P₁

                  Figure: Three philosophers and
                          three forks.

SOLUTION
────────
Let's have all the philosophers pick up their right fork first,
followed by the left fork. Straightforward FSP:

    P0 = (p0f2g -> p0f0g -> p0f0r -> p0f2r -> P0).
    P1 = (p1f0g -> p1f1g -> p1f1r -> p1f0r -> P1).
    P2 = (p2f1g -> p2f2g -> p2f2r -> p2f1r -> P2).
    F0 = (p0f0g -> p0f0r -> F0 |
          p1f0g -> p1f0r -> F0).
    F1 = (p2f1g -> p2f1r -> F1 |
          p1f1g -> p1f1r -> F1).
    F2 = (p0f2g -> p0f2r -> F2 |
          p2f2g -> p2f2r -> F2).
    ||T = (P0 || P1 || P2 || F0 || F1 || F2).

Note that in the fork model, a philosopher that is out of reach
can not engage in the event of getting or releasing the fork.
I.e. P2 cannot get fork 0, thus p2f0g and p2f0r can not occur.

This has a deadlock where each philosopher picks up their right-
side fork. That is, P0 picks up F2, P1 picks up F0 and P2 picks
up F1 - the first events in processes. That leaves no further
events that can occur.

For example, since p0 cannot get f0, since f0 is taken
by p1, and p1 cannot release f0 since ... etc.

Changing the order in which (for example) P0 picks up their
forks will remove the deadlock.

Q: Extend the FSM description to handle N philosophers.

SOLUTION
────────

Each fork i can be taken by philosopher i or i-1.

FORK = (get -> rel -> FORK).
PHIL = ()
||TABLE = ({p0, p1}::fork0:FORK ||
           {p1, p2}::fork1:FORK ||
           {p2, p0}::fork2:FORK).

    F = (get -> rel -> F).

    FORK(I=0) = FORK[0],
    FORK[i:0..1] = ({p[i], p[i+1]}::fork[i]:F),
    FORK[2] = ({p[2], p[0]}::fork[2]:F).

    ||FORKS = (FORK(0) || FORK(1) || FORK(2)).

    PHIL(I=0) = PHIL[0],
    PHIL[0] = (p[0].fork[2].get -> p[0].fork[0].get -> p[0].fork[0].rel -> p[0].fork[2].rel -> PHIL[0]),
    PHIL[i:1..2] = (p[i].fork[i-1].get -> p[i].fork[i].get -> p[i].fork[i].rel -> p[i].fork[i-1].rel -> PHIL[i]).

    ||PHILS = (PHIL(0) || PHIL(1) || PHIL(2)).

    ||TABLE = (FORKS || PHILS).

  --------------------------
  FORK(I=0) = FORK[I],
  FORK[i:0..1] = (p[i].fork[i].get -> p[i].fork[i].rel -> FORK[i] | p[i+1].fork[i].get -> p[i+1].fork[i].rel -> FORK[i]),
  FORK[2]       = (p[2].fork[2].get -> p[2].fork[2].rel -> FORK[2] | p[0].fork[2].get -> p[0].fork[2].rel -> FORK[2]).

  ||FORKS = (FORK(0) || FORK(1) || FORK(2)).

  PHIL(I=0) = PHIL[I],
  PHIL[0] = (p[0].fork[0].get -> p[0].fork[2].get -> p[0].fork[2].rel -> p[0].fork[0].rel -> PHIL[0]),
  PHIL[i:1..2] = (p[i].fork[i-1].get -> p[i].fork[i].get -> p[i].fork[i].rel -> p[i].fork[i-1].rel -> PHIL[i]).

  ||PHILS = (PHIL(0) || PHIL(1) || PHIL(2)).

  ||TABLE = (FORKS || PHILS).

Q: Get rid of the deadlock by making one of the philosophers
left-handed.

SOLUTION
────────
    const N = 2
    F[i:0..N] = (pick[i] -> put[i] -> FORKS[i]).
    P[0]      = (pick[0] -> pick[N] -> put[N] -> put[0] -> P[0]).
    P[i:1..N] = (pick[i-1] -> pick[i] -> put[i] -> put[i-1] -> P[i]).
    ||TABLE = (F || P).

This solves the deadlock, since the last philosopher cannot
pick up their right-hand fork if it is taken already.

This has implications for fairness, since the last philosopher
must pick up their right-hand fork before attempting to pick up
their left-hand fork. ???
